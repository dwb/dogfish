#!/usr/bin/env bash
# vim: ft=sh:ts=2:sw=2:expandtab

# dogfish
# by Dan Brown <dan@stompydan.net>
# https://github.com/dwb/dogfish
#
# A really simple migration manager for MySQL and PostgreSQL.
#
# Copyright (c) 2013, Dan Brown
# This is licenced under the 3-clause BSD license. See the LICENSE file
# supplied in this repository for the full text.

VERSION='1.2.0'

DOGFISH_MYSQL_OPTS=( $DOGFISH_MYSQL_OPTS )
DOGFISH_PG_OPTS=( $DOGFISH_PG_OPTS )

set -e # Stop on error
set -o nounset # Error on using unset vars
export LS_OPTIONS=
export PGOPTIONS='--client-min-messages=warning' # hush up psql NOTICEs

case ${1-} in
  "-h" | "--help")
    while read line; do echo "$line"; done <<END
dogfish v${VERSION}
by Dan Brown <dan@stompydan.net>
https://github.com/dwb/dogfish

usage: dogfish migrate|rollback DB_NAME [FINISH_AT_MIGRATION]
       dogfish remigrate DB_NAME
       dogfish create-migration [MIGRATION_NAME]

where db_name is the name of the database in MySQL or PostgreSQL
      finish_at_migration is the (optional) number of the migration to finish
          processing after
      migration_name is an optional description of the migration

'remigrate' rolls back and re-applies the last migration. Useful for
development.

The database server you are using is auto-detected if you name your migrations
directory "mysql_migrations", "postgres_migrations" or "pg_migrations". You can
also use hyphens instead of underscores if you want to.

Commands are sent to the databse using unassuming calls of mysql, mysqldump,
psql, and pg_dump. Either arrange yourself for these tools to pick up the
hostname and credentials in their standard ways, or set DOGFISH_MYSQL_OPTS or
DOGFISH_PG_OPTS to give these tools the necessary command-line options.

The SQL scripts themselves are named "migrate-version-name.sql" or
"rollback-version-name.sql", where version is the numeric version number
(usually an ISO YMDHms timestamp, without punctuation), and name is whatever
you want. If you don't provide a rollback script for a particular version, no
complaining will happen. You can also provide a rollback script with no migrate
companion if you're feeling really wild. If you can't work out what I'm on
about, look in the test_template directory for some good clues.

A dump of just the schema will be made in the migrations directory, under
the convenient name "schema.sql".
END
    exit
    ;;
  "-v" | "--version")
    echo $VERSION
    exit
    ;;
esac

action=${1-}; shift || true
case $action in
  migrate|rollback|remigrate)
    db_name=${1-}; shift || true
    finish_at_version=${1-}; shift || true
    ;;
  dump-schema|load-schema)
    db_name=${1-}; shift || true
    ;;
  create-migration)
    migration_name=${1-}; shift || true
    ;;
esac

db_type=${DOGFISH_DB_TYPE:-}
schema_migrations_table=schema_migrations
migration_id_column=migration_id
migrations_dir=migrations
bq="\`" # This might look a bit silly, but vim syntax colouring messes up
        # when using backquotes in heredocs. It was annoying me.

### General functions

function inform() {
  echo "$@"
}

function die() {
  echo -e "$@" >&2
  exit 1
}

function find_dir_by_pattern() {
  find . -maxdepth 1 -type d | grep -m1 "^\./$1\$" || true
}

function detect_db_type() {
  migrations_dir=$(find_dir_by_pattern "mysql[-_]migrations")
  if [[ ! -z $migrations_dir ]]; then
    db_type=mysql
    return
  fi

  migrations_dir=$(find_dir_by_pattern "\(pg\|postgres\)[-_]migrations")
  if [[ ! -z $migrations_dir ]]; then
    db_type=pg
    return
  fi
}

function available_migrations_to_scripts() {
  set -e
  pushd "${migrations_dir}" >/dev/null
  # TODO: work out how to not use `ls` here: won't deal with newlines in
  # file names and all that classic stuff. But then the regex will filter
  # out any weirdness, so not that bad.
  #
  # Quieten shellcheck for this one, we know about it:
  # shellcheck disable=SC2012
  ls |sed -ne "s/^${action}[-_]\([[:digit:]]\{1,\}\)\([-_][-a-zA-Z0-9_]\{1,\}\)\{0,1\}\.sql$/\1 &/p"
  popd >/dev/null
}

function available_migrations() {
  available_migrations_to_scripts | awk '{print $1}'
}

function available_migration_script_for_id() {
  available_migrations_to_scripts | egrep -m1 "^$1\>" | awk '{print $2}'
}

function migrations_to_apply() {
  local comm_cols="-13"
  [[ $action == "rollback" ]] && comm_cols="-12"
  comm ${comm_cols} <(applied_migrations) <(available_migrations)
}

function truncate_migrations_if_requested() {
  if [[ -n $finish_at_version ]]; then
    sed -e "/^${finish_at_version}\$/q"
  else
    tee
  fi
}

### Generic db interfaces

function db_exec() {
  ${db_type}_db_exec
  return $?
}

function create_schema_migrations_table() {
  ${db_type}_create_schema_migrations_table
  return $?
}

function db_schema_dump() {
  ${db_type}_db_schema_dump
  return $?
}

function applied_migrations() {
  set -e
  ${db_type}_applied_migrations
  return $?
}

function apply_migration_id() {
  if [[ $action == "migrate" ]]; then
    inform -n Migrating to "$1..."
  else
    inform -n Rolling back "$1..."
  fi
  ${db_type}_apply_migration_id "$@"
  local result=$?
  [[ $result -eq 0 ]] && inform done.
  return $result
}

### MySQL interface

# Oh god ok so, the mysql tool doesn't return >0 when an error occurs, or
# stops execution. It just powers right through. I can't help it not aborting,
# but I can try to detect an error. We swap stdout and stderr, pipe stdout
# to something that looks for lines starting "ERROR", and hide it behind a
# function that redirects stderr (the output we actually want) back to stdout.
function mysql_db_exec_to_stderr() {
  mysql "${DOGFISH_MYSQL_OPTS[@]:+${DOGFISH_MYSQL_OPTS[@]}}" -BN "$@" "$db_name"  3>&1 1>&2- 2>&3- | while read line; do
    if [[ $line == ERROR\ * ]]; then
      echo "$line"
      return 1
    fi
  done
  return $?
}

function mysql_db_exec() {
  mysql_db_exec_to_stderr "$@" 2>&1
  return $?
}

function mysql_create_schema_migrations_table() {
  db_exec <<END
  CREATE TABLE IF NOT EXISTS ${bq}${schema_migrations_table}${bq} (
    ${bq}${migration_id_column}${bq} VARCHAR(128) PRIMARY KEY NOT NULL
  );
END
}

function mysql_db_schema_dump() {
  echo -e "-- dogfish schema dump\n\n"
  mysqldump "${DOGFISH_MYSQL_OPTS[@]:+${DOGFISH_MYSQL_OPTS[@]}}" --comments --no-data --routines --triggers --tz-utc --skip-add-drop-table \
    --add-locks --create-options --set-charset \
    "${db_name}"
  echo -e "\n\n-- Schema dump done. Now dumping migration tracking table:\n\n"
  mysqldump "${DOGFISH_MYSQL_OPTS[@]:+${DOGFISH_MYSQL_OPTS[@]}}" --comments --no-create-info --skip-triggers --tz-utc \
    "${db_name}" "${schema_migrations_table}"
}

function mysql_applied_migrations() {
  db_exec <<END
SELECT ${migration_id_column} FROM ${schema_migrations_table}
  ORDER BY ${migration_id_column} ASC
END
}

function mysql_post_apply_sql() {
  if [[ $action == "migrate" ]]; then
    echo "INSERT INTO \`${schema_migrations_table}\`
      (\`${migration_id_column}\`) VALUES ('$1');"
  else
    echo "DELETE FROM \`${schema_migrations_table}\`
      WHERE \`${migration_id_column}\` = '$1';"
  fi
}

function mysql_apply_migration_id() {
  db_exec <<END
START TRANSACTION;
$(< "${migrations_dir}/$(available_migration_script_for_id "$1")")

$(mysql_post_apply_sql "$1") 
COMMIT;
END
  return $?
}

### PostgreSQL interface

function pg_db_exec() {
  psql "${DOGFISH_PG_OPTS[@]:+${DOGFISH_PG_OPTS[@]}}" --no-psqlrc --single-transaction --quiet \
    --tuples-only --no-align --no-password "$db_name"
  return $?
}

function pg_create_schema_migrations_table() {
  db_exec <<END
  CREATE TABLE IF NOT EXISTS "${schema_migrations_table}" (
    "${migration_id_column}" VARCHAR(128) PRIMARY KEY NOT NULL
  );
END
}

function pg_db_schema_dump() {
  echo -e "-- dogfish schema dump\n\n"
  pg_dump "${DOGFISH_PG_OPTS[@]:+${DOGFISH_PG_OPTS[@]}}" --schema-only --no-acl --no-owner --no-password "${db_name}"
  echo -e "\n\n-- Schema dump done. Now dumping migration tracking table:\n\n"
  pg_dump "${DOGFISH_PG_OPTS[@]:+${DOGFISH_PG_OPTS[@]}}" --data-only --table="${schema_migrations_table}" --inserts --no-acl --no-owner --no-password "${db_name}"
}

function pg_applied_migrations() {
  db_exec <<END
SELECT ${migration_id_column} FROM ${schema_migrations_table}
  ORDER BY ${migration_id_column} ASC;
END
}

function pg_post_apply_sql() {
  if [[ $action == "migrate" ]]; then
    echo "INSERT INTO \"${schema_migrations_table}\"
      (\"${migration_id_column}\") VALUES ('$1');"
  else
    echo "DELETE FROM \"${schema_migrations_table}\"
      WHERE \"${migration_id_column}\" = '$1';"
  fi
}

function pg_apply_migration_id() {
  db_exec <<END
$(< "${migrations_dir}/$(available_migration_script_for_id "$1")")

$(pg_post_apply_sql "$1") 
END
  return $?
}

### Preflight checks

if [[ -z $action ]]; then
  die "Action not given. Use one of:\n
  dogfish migrate\n
  dogfish rollback\n
  dogfish remigrate\n
  dogfish create-migration"
fi

if [[ $action == "migrate" || $action == "rollback" || $action == "remigrate" ]]; then
  if [[ -z $db_name ]]; then
    die "Database name not given"
  fi
fi

if [[ -z $db_type ]]; then
  detect_db_type
else
  migrations_dir=${db_type}_migrations
fi

if [[ -z $db_type ]]; then
  die "Database type not detected"
fi

if ! [[ -d ${migrations_dir} ]]; then
  die "Migrations directory ${migrations_dir} not found"
fi

schema_file="${migrations_dir}/schema.sql"

### Let's actually do some stuff

function migrate() {
  local direction=$1
  action=$1  # FIXME: refactor out the nasty global!
  create_schema_migrations_table

  if [[ -n $finish_at_version ]] && ! migrations_to_apply | grep -q "^${finish_at_version}\$"; then
    die "Migration ${finish_at_version} would not have been reached"
  fi

  local sort_dir=""
  local rolling_back="false"
  if [[ $direction == "rollback" ]]; then
    sort_dir="-r"
    rolling_back="true"
  fi

  for migration_id in $(migrations_to_apply | sort ${sort_dir} | truncate_migrations_if_requested); do
    apply_migration_id "$migration_id"
    # Only roll back the most recent migration.
    # TODO: make rolling back number of migrations configurable
    $rolling_back && break
  done

  dump_schema
}

function create_migration() {
  date=$(date +%Y%m%d%H%M%S)
  migration_name=$(echo "${migration_name}" | tr ' ' '-')
  upfile=${migrations_dir}/migrate-${date}-${migration_name}.sql;
  downfile=${migrations_dir}/rollback-${date}-${migration_name}.sql;
  touch "${upfile}" "${downfile}"
  echo "Created
        ${upfile}
        ${downfile}"
}

function load_schema() {
  if ! [[ -r $schema_file ]]; then
    die "Couldn't read schema at $schema_file"
  fi
  db_exec < "${schema_file}"
}

function dump_schema() {
  db_schema_dump > "${schema_file}"
}

case $action in
  remigrate)
    migrate rollback
    migrate migrate
    ;;
  migrate|rollback)
    migrate "$action"
    ;;
  create-migration)
    create_migration
    ;;
  dump-schema)
    dump_schema
    ;;
  load-schema)
    load_schema
    ;;
esac
